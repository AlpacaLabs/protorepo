syntax = "proto3";

package alpacalabs.mfa.v1;

option csharp_namespace = "AlpacaLabs.Mfa.V1";
option go_package = "github.com/AlpacaLabs/protorepo-mfa-go/alpacalabs/mfa/v1";
option java_multiple_files = true;
option java_outer_classname = "MfaProto";
option java_package = "com.alpacalabs.mfa.v1";
option objc_class_prefix = "ALM";
option php_namespace = "AlpacaLabs\\Mfa\\V1";

import "alpacalabs/mfa/v1/api_requires_mfa.proto";
import "alpacalabs/mfa/v1/get_delivery_options.proto";
import "alpacalabs/mfa/v1/deliver_code.proto";
import "alpacalabs/mfa/v1/verify_code.proto";

service MFAService {
    rpc RequiresMfa(RequiresMfaRequest) returns (RequiresMfaResponse) {}

    // GetDeliveryOptions is Step 1 in the MFA flow.
    //
    // In exchange for some account identifier (an email, username, or phone number)
    // clients will receive their devices that can receive codes -- for example, any
    // of their confirmed email addresses and phone numbers -- so they can choose how
    // they want to receive their code.
    //
    // Behind the scenes, this will persist a code in the DB. The response will
    // contain that entity's primary key and delivery options for the client.
    rpc GetDeliveryOptions(GetDeliveryOptionsRequest) returns (GetDeliveryOptionsResponse) {}

    // DeliverCode is Step 2 in the MFA flow.
    //
    // The client sends the primary key of their code, as well as the primary key of
    // an email address or phone number that will receive the code.
    rpc DeliverCode(DeliverCodeRequest) returns (DeliverCodeResponse) {}

    // VerifyCode is Step 3 in the MFA flow.
    //
    // The client sends the random code they received and the primary key of their account.
    // If the code is valid, they're returned a JWT.
    rpc VerifyCode(VerifyCodeRequest) returns (VerifyCodeResponse) {}
}
